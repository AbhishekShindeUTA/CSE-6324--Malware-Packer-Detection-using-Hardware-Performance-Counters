# in case you run into any errors try doing this first:
# pip install xlrd

from pathlib import Path

import pandas as pd
from pandas import DataFrame

#main function that checks if a folder output exists or not and then begins execution
#finds all excel files in the specified folder
def _main( folder_path: str, output_file: str ) :
    folder = Path( folder_path )
    if not folder.is_dir() :
        raise Exception( f'{folder_path} does not exist' )

    files = [x for x in folder.iterdir() if x.is_file() and x.suffix == '.xlsx']
    data = {}

    for file in files :
        df = pd.read_excel( file )
        start = _get_start_row( df )
        file_data = _extract_data( df, start )
        _merge_data( data, file_data )

    _dump_data( output_file, data )

#dump the name of the value and value
def _dump_data( filename: str, data: dict ) :
    with open( filename, 'w' ) as fp :
        for k, v in data.items() :
            row = f'{k}, {", ".join( [str( x ) for x in v] )}'
            print( row, file=fp )

#merge all dictionaries into a single dictionary 
def _merge_data( data: dict, file_data: dict ) :
    for k, v in file_data.items() :
        if v == 0 :
            continue
        if k not in data.keys() :
            data[k] = []
        data[k].append( v )

#extract data from rows using pandas and return it 
def _extract_data( df: DataFrame, start: int ) -> dict :
    data = {}
    required = df.iloc[start :]
    for r in range( required.shape[0] ) :
        row = required.iloc[r]
        data[row[0]] = row[1]
    return data


#returns dimensions
#gets hardware event type and hardware event count
def _get_start_row( df: DataFrame ) -> int :
    for row in range( df.shape[0] ) :
        if _cell_equals( df.iat[row, 0], 'Hardware Event type' ) and _cell_equals( df.iat[row, 1], 'Hardware Event count' ) :
            return row + 1
    return -1


def _cell_equals( cell, value: str ) -> bool :
    if not isinstance( cell, str ) :
        return False
    if cell.lower().startswith( value.lower() ) :
        return True
    return False


if __name__ == '__main__' :
    _main( r'path to files', r'parth to where the file will output\output.csv' )
